from datetime import date

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove

import app.keyboard as kb
from converter import excel_sql
from app.database.requests import get_users


client = Router()


@client.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã'
                         '\n\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–∏—Å–µ–º —Å—á–∞—Å—Ç—å—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
                         reply_markup=kb.menu)


@client.message(F.text == '‚úâÔ∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É')
async def new_mail(message: Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª', reply_markup=ReplyKeyboardRemove())


@client.message(F.document)
async def converter(message: Message):
    doc = message.document.file_name
    try:
        excel_sql(doc)

        users = await get_users()
        x = 0
        for user in users:
            if user[11] and user[13] < 0:
                x += 1

        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–æ–ª–∂–Ω–∏–∫–æ–≤ –Ω–∞ {date.today()} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {x} –∫–≤–∞—Ä—Ç–∏—Ä\n\n'
                             f'üëá –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏')

        for user in users:
            if user[11] and user[13] < 0:
                await message.answer(f'–°—á–µ—Ç: {user[1]}\n\n'
                                     f'–§–ò–û: {user[2]}\n'
                                     f'–ê–¥—Ä–µ—Å: {user[4]}, –¥–æ–º {user[5]}, –∫–≤. {user[6]}\n\n'
                                     f'–¢–∞—Ä–∏—Ñ: {user[11]}\n'
                                     f'–ë–∞–ª–∞–Ω—Å: {user[13]} —Å–æ–º\n\n'
                                     f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 20 —á–∏—Å–ª–∞!')
                break

    except FileNotFoundError:
        await message.answer('–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–æ—Ç–∞.\n'
                             '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.')


@client.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞')
async def go(message: Message):
    users = await get_users()

    for user in users:
        if user[11] and user[13] < 0:
            await message.answer(f'–°—á–µ—Ç: {user[1]}\n\n'
                                 f'–§–ò–û: {user[2]}\n'
                                 f'–ê–¥—Ä–µ—Å: {user[4]}, –¥–æ–º {user[5]}, –∫–≤. {user[6]}\n\n'
                                 f'–¢–∞—Ä–∏—Ñ: {user[11]}\n'
                                 f'–ë–∞–ª–∞–Ω—Å: {user[13]} —Å–æ–º\n\n'
                                 f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 20 —á–∏—Å–ª–∞!')


@client.message()
async def other(message: Message):
    await message.delete()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name.capitalize()}\n'
                         f'–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–≤–æ—Ä–æ—Ç \n'
                         f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–∂–º–∏ /start')
