from datetime import date

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

import app.keyboard as kb
from app.converter import excel_sql
from app.valid_kg import is_valid_kg
from app.database.requests import get_users, get_phone


client = Router()


@client.callback_query(F.data == 'start')
@client.message(CommandStart())
async def cmd_start(message: Message | CallbackQuery):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã'
                         '\n\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–∏—Å–µ–º —Å—á–∞—Å—Ç—å—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
                         reply_markup=kb.menu)


@client.message(F.text == '‚úâÔ∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É')
async def new_mail(message: Message):
    await message.answer('üíæ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª', reply_markup=ReplyKeyboardRemove(), )


@client.message(F.document)
async def converter(message: Message):
    doc = message.document.file_name
    try:
        excel_sql(doc)

        users = await get_users()

        x = 0
        debt = 0
        for user in users:
            if user[11] and user[13] < 0:
                debt -= int(user[13])
                x += 1

        await message.answer(f'–ù–∞ {date.today()}:\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–æ–ª–∂–Ω–∏–∫–æ–≤: {x} –∫–≤–∞—Ä—Ç–∏—Ä\n'
                             f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {debt} —Å–æ–º\n\n'
                             f'üëá –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏')

        for user in users:
            if user[11] and user[13] < 0:
                await message.answer(f'–°—á–µ—Ç: {user[1]}\n\n'
                                     f'–§–ò–û: {user[2]}\n'
                                     f'–ê–¥—Ä–µ—Å: {user[4]}, –¥–æ–º {user[5]}, –∫–≤. {user[6]}\n\n'
                                     f'–¢–∞—Ä–∏—Ñ: {user[11]}\n'
                                     f'–ë–∞–ª–∞–Ω—Å: {user[13]} —Å–æ–º\n\n'        
                                     f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 20 —á–∏—Å–ª–∞!')
                break

        await message.answer('–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–∏—Å–µ–º —Å—á–∞—Å—Ç—å—è?', reply_markup=await kb.go_score())

    except FileNotFoundError:
        await message.answer('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–æ—Ç–∞ ‚ùå\n'
                             'üíæ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.')


@client.callback_query(F.data == 'push')
async def go(callback: CallbackQuery):
    await callback.message.answer('üì≤ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏...')
    users = await get_users()
    phones = await get_phone()

    dict_phones = {}
    incorrect_number_format = []

    for phone in phones:
        if is_valid_kg(str(phone[1])):
            dict_phones[phone[0]] = f'+{phone[1]}'
        else:
            incorrect_number_format.append((phone[0], phone[1]))

    account_without_phone_number = []

    x = 0
    for user in users:
        if user[11] and user[13] < 0:
            try:
                await callback.message.answer(f'–°—á–µ—Ç: {user[1]}\n\n'
                                              f'–§–ò–û: {user[2]}\n'
                                              f'–ê–¥—Ä–µ—Å: {user[4]}, –¥–æ–º {user[5]}, –∫–≤. {user[6]}\n\n'
                                              f'–¢–∞—Ä–∏—Ñ: {user[11]}\n'
                                              f'–ë–∞–ª–∞–Ω—Å: {user[13]} —Å–æ–º\n\n'
                                              f'–ù–æ–º–µ—Ä: {dict_phones[user[1]]}\n'
                                              f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 20 —á–∏—Å–ª–∞!')
                x += 1
            except KeyError:
                account_without_phone_number.append(user[1])



    await callback.message.answer(f'‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–∫–æ–Ω—á–µ–Ω\n\n'
                                  f'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {x} –∞–±–æ–Ω–µ–Ω—Ç–∞–º',
                                  reply_markup=kb.menu)

    if account_without_phone_number:
        await callback.message.answer('‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è\n'
                                      'üìµ –°—á–µ—Ç–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚¨áÔ∏è')
        for score in account_without_phone_number:
            await callback.message.answer(f'{score}')

        account_without_phone_number.clear()

    if incorrect_number_format:
        await callback.message.answer('‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è\n'
                                      'üì¥ –°—á–µ—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ ‚¨áÔ∏è')
        for score, phone in incorrect_number_format:
            await callback.message.answer(f'{score} - {phone}')

        incorrect_number_format.clear()


@client.message()
async def other(message: Message):
    await message.delete()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name.capitalize()}\n'
                         f'–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–≤–æ—Ä–æ—Ç \n'
                         f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–∂–º–∏ /start')
